import OpenAI from 'openai';
import { searchWeb } from './tavily';
import { ChatMessage, FunctionDefinition } from './types';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SYSTEM_PROMPT = process.env.SYSTEM_PROMPT || 
  '–í—ã - —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—é–º–µ–Ω—Å–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
 * @returns –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function cleanFormattingSymbols(text: string): string {
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // –£–¥–∞–ª—è–µ–º **, [], {}, <>, _, ~, `, #, |, –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // –î–µ—Ñ–∏—Å (-) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —É–¥–∞–ª—è—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞—è—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞)
  let cleaned = text
    .replace(/[\*\[\]\{\}\<\>\_\~\`\#\|\=\+]/g, '')
    .replace(/\n\s*[-‚Ä¢]\s+/g, '\n'); // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
  // –ò—â–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ω—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã: –ø–∞—Å–ø–æ—Ä—Ç, –°–ù–ò–õ–°, –∞—Ç—Ç–µ—Å—Ç–∞—Ç"
  // –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  cleaned = cleaned.replace(/(?:–Ω—É–∂–Ω[–∞-—è]+|–Ω–µ–æ–±—Ö–æ–¥–∏–º[–∞-—è]+|—Ç—Ä–µ–±—É[–∞-—è]+)[^:,.]+(:|—Ç—Ä–µ–±—É–µ—Ç—Å—è|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)[^:,.]*?(:)?\s*([–∞-—è–ê-–Ø][^,.]+(?:,\s+[–∞-—è–ê-–Ø][^,.]+)+)/gi, (match, p1, p2, p3) => {
    if (!p3) return match;
    
    // –ë–µ—Ä—ë–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (p3) –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—è—Ç–æ–π
    const items = p3.split(/,\s+/);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    let result = match.split(p3)[0].trim() + "\n\n";
    items.forEach((item: string, index: number) => {
      result += `${index + 1}. ${item.trim()}\n`;
    });
    
    return result;
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª—é–±—ã–µ —Å–ø–∏—Å–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ "1) " –∏–ª–∏ "1. " –≤ —Ñ–æ—Ä–º–∞—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
  // –ò—â–µ–º —à–∞–±–ª–æ–Ω, –≥–¥–µ –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä—ã –∏–¥–µ—Ç —Ç–æ—á–∫–∞ –∏–ª–∏ —Å–∫–æ–±–∫–∞ –∏ —Ç–µ–∫—Å—Ç, –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
  cleaned = cleaned.replace(/(\n|^)\s*(\d+)[\.\)]\s+([^\n]+)/g, (match, newline, number, text) => {
    return `${newline}${number}. ${text}`;
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å "–¥–æ–∫—É–º–µ–Ω—Ç—ã" –∏–ª–∏ "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"
  if (/–¥–æ–∫—É–º–µ–Ω—Ç|–Ω–µ–æ–±—Ö–æ–¥–∏–º|–Ω—É–∂–Ω|—Ç—Ä–µ–±—É/i.test(cleaned) && /[–∞-—è–ê-–Ø][^,.]+(?:,\s+[–∞-—è–ê-–Ø][^,.]+)+/.test(cleaned)) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    cleaned = cleaned.replace(/(?:–¥–æ–∫—É–º–µ–Ω—Ç[–∞-—è]*|–Ω–µ–æ–±—Ö–æ–¥–∏–º[–∞-—è]*|–Ω—É–∂–Ω[–∞-—è]*|—Ç—Ä–µ–±—É[–∞-—è]*)[^:,.]*?:\s*([–∞-—è–ê-–Ø][^,.]+(?:,\s+[–∞-—è–ê-–Ø][^,.]+)+)\.?/gi, (match, p1) => {
      if (!p1) return match;
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
      const items = p1.split(/,\s+/).filter((item: string) => item.trim().length > 0);
      if (items.length <= 1) return match;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      let result = match.split(p1)[0].trim() + "\n\n";
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      items.forEach((item: string, index: number) => {
        result += `${index + 1}. ${item.trim()}\n`;
      });
      
      return result;
    });
  }

  return cleaned;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å OpenAI
const availableFunctions: Record<string, (args: any) => Promise<string>> = {
  search_web: async (args: { query: string }) => {
    try {
      console.log(`–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ search_web —Å –∑–∞–ø—Ä–æ—Å–æ–º: "${args.query}"`);
      const result = await searchWeb(args.query);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ search_web:', error);
      return '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.';
    }
  }
};

// –°—Ö–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è OpenAI
const functionDefinitions: FunctionDefinition[] = [
  {
    name: 'search_web',
    description: '–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    parameters: {
      type: 'object',
      properties: {
        query: {
          type: 'string',
          description: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        },
      },
      required: ['query'],
    },
  },
];

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI API
 */
function convertMessagesToOpenAIFormat(messages: ChatMessage[]): any[] {
  return messages.map(msg => {
    const result: any = {
      role: msg.role,
      // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è content, –¥–∞–∂–µ –µ—Å–ª–∏ null
      content: msg.content || ''
    };
    
    if (msg.name) {
      result.name = msg.name;
    }
    
    if (msg.function_call) {
      result.function_call = msg.function_call;
    }
    
    if (msg.tool_calls) {
      result.tool_calls = msg.tool_calls;
    }
    
    return result;
  });
}

export async function generateChatResponse(messages: ChatMessage[]): Promise<string> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ
    if (messages.length > 0 && messages[0].role === 'system') {
      // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
      messages.unshift({ 
        role: 'system', 
        content: SYSTEM_PROMPT 
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const userMessage = messages.find(msg => msg.role === 'user')?.content || '';
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userMessage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    if (
      (typeof userMessage === 'string') && 
      (
        (userMessage.toLowerCase().includes('–¥–æ–∫—É–º–µ–Ω—Ç') && userMessage.toLowerCase().includes('–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏')) ||
        (userMessage.toLowerCase().includes('—á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏')) ||
        (userMessage.toLowerCase().includes('–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω'))
      )
    ) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è');
      
      return `–î–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –¢—é–º–ì–£ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:

1. –ü–∞—Å–ø–æ—Ä—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)
2. –ê—Ç—Ç–µ—Å—Ç–∞—Ç –æ —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –¥–∏–ø–ª–æ–º –æ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è)
3. –°–ù–ò–õ–° (–∫–æ–ø–∏—è)
4. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 3—Ö4 —Å–º (4 —à—Ç—É–∫–∏)
5. –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ 086-–£ (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
6. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 4 –≥–æ–¥–∞)
7. –î–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–π! üéì`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–∫-–æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    if (
      (typeof userMessage === 'string') && 
      (
        (userMessage.toLowerCase().includes('–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏') && userMessage.toLowerCase().includes('—Ç—é–º–≥—É')) ||
        (userMessage.toLowerCase().includes('–ø—Ä–∞–≤–∏–ª–∞') && userMessage.toLowerCase().includes('—Ç—é–º–≥—É'))
      )
    ) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è');
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
      const mockResult = await searchWeb("–ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –¢—é–º–ì–£ 2025");
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      return cleanFormattingSymbols(`–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –¢—é–º–ì–£ –Ω–∞ 2025 –≥–æ–¥! üéì

${mockResult}

–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, —Å–ø—Ä–∞—à–∏–≤–∞–π - —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üöÄ`);
    } 
    else if (
      (typeof userMessage === 'string') && 
      (
        (userMessage.toLowerCase().includes('–Ω–æ–≤–æ—Å—Ç') && userMessage.toLowerCase().includes('—Ç—é–º–≥—É')) ||
        (userMessage.toLowerCase().includes('—Å–æ–±—ã—Ç–∏') && userMessage.toLowerCase().includes('—Ç—é–º–≥—É'))
      )
    ) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö');
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –Ω–æ–≤–æ—Å—Ç—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
      const mockResult = await searchWeb("–Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –≤ –¢—é–º–ì–£ 2025");
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      return cleanFormattingSymbols(`–ü—Ä–∏–≤–µ—Ç! üëã –í–æ—Ç —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –¢—é–º–ì–£ –≤ 2025 –≥–æ–¥—É! üéâ

${mockResult}

–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è –∂–∏–∑–Ω—å –∫–∏–ø–∏—Ç! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∫–æ–º-—Ç–æ —Å–æ–±—ã—Ç–∏–∏, –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏! üòé`);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
    const openaiMessages = convertMessagesToOpenAIFormat(messages);
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ OpenAI:', 
      JSON.stringify(openaiMessages.map(m => ({ 
        role: m.role, 
        content: typeof m.content === 'string' && m.content.length > 50 
          ? m.content.substring(0, 50) + '...' 
          : (m.content || '[–ø—É—Å—Ç–æ]') 
      })), null, 2)
    );
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–π
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: openaiMessages,
      temperature: 0.3,
      max_tokens: 1000,
      tools: functionDefinitions.map(fn => ({
        type: 'function',
        function: fn
      })),
    });

    const responseMessage = response.choices[0]?.message;
    console.log('–û—Ç–≤–µ—Ç –æ—Ç OpenAI:', responseMessage ? '–ø–æ–ª—É—á–µ–Ω' : '–Ω–µ –ø–æ–ª—É—á–µ–Ω');
    
    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if (responseMessage?.tool_calls && responseMessage.tool_calls.length > 0) {
      const toolCall = responseMessage.tool_calls[0];
      console.log('OpenAI –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é:', toolCall.function.name);
      
      if (toolCall.type === 'function' && toolCall.function.name === 'search_web') {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫
        messages.push({
          role: 'assistant',
          content: responseMessage.content ? cleanFormattingSymbols(responseMessage.content) : '',
          tool_calls: [toolCall]
        });

        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
          const args = JSON.parse(toolCall.function.arguments);
          console.log('–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ search_web:', args);
          const functionResult = await availableFunctions.search_web(args);
          console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ search_web:', 
            functionResult ? '–ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: ' + functionResult.length + ')' : '–Ω–µ –ø–æ–ª—É—á–µ–Ω');

          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
          messages.push({
            role: 'function',
            name: 'search_web',
            content: functionResult || '',
          });

          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º API —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          const openaiMessagesWithFunctionResults = convertMessagesToOpenAIFormat(messages);
          console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ OpenAI:', 
            openaiMessagesWithFunctionResults.length + ' —Å–æ–æ–±—â–µ–Ω–∏–π');
          
          const secondResponse = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: openaiMessagesWithFunctionResults,
            temperature: 0.3,
            max_tokens: 1000,
          });

          const finalResult = secondResponse.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
          console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI:', 
            finalResult ? '–ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: ' + finalResult.length + ')' : '–Ω–µ –ø–æ–ª—É—á–µ–Ω');
          return cleanFormattingSymbols(finalResult);
        } catch (functionError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', functionError);
          return cleanFormattingSymbols(`–û–π! –Ø –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ü§î –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å? –ê –ø–æ–∫–∞ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥—Ä—É–≥–∏—Ö –∫—Ä—É—Ç—ã—Ö –≤–µ—â–∞—Ö –≤ –Ω–∞—à–µ–º —É–Ω–∏–≤–µ—Ä–µ! üéì‚ú®`);
        }
      }
    }

    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    return responseMessage?.content 
      ? cleanFormattingSymbols(responseMessage.content) 
      : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

export default openai; 