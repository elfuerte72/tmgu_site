import { NextRequest, NextResponse } from 'next/server';
import { generateChatResponse } from '@/utils/openai';
import { ChatMessage } from '@/utils/types';
import { initializeRAG } from '@/services/rag/ragService';
import { UniversityRagService } from '@/services/rag/universityRagService';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ API
let isRagInitialized = false;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG
 */
export async function POST(request: NextRequest) {
  try {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    if (!isRagInitialized) {
      try {
        await initializeRAG();
        isRagInitialized = true;
        console.log('üöÄ RAG-—Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (initError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã:', initError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const { message, history, instanceId = 'default' } = await request.json();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π UniversityRagService –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîé –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', message);
    const searchResult = await UniversityRagService.searchRag(message);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${searchResult.chunks.length} —á–∞–Ω–∫–æ–≤, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${searchResult.hasRelevantData}`);
    
    if (searchResult.hasRelevantData) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ RAG –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ RAG
      const messages = UniversityRagService.prepareMessages(message, history, searchResult.chunks);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ RAG
      const responseContent = await generateChatResponse(messages);
      
      return NextResponse.json({ 
        message: responseContent,
        source: 'rag',
        instanceId
      });
    } else {
      // –ï—Å–ª–∏ –≤ RAG –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —á–∞—Ç
      console.log('‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ RAG, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —á–∞—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á–∞–Ω–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const messages = UniversityRagService.prepareMessages(message, history, []);
      
      const responseContent = await generateChatResponse(messages);
      
      return NextResponse.json({ 
        message: responseContent,
        source: 'default',
        instanceId
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API —á–∞—Ç–∞ —Å RAG:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞' },
      { status: 500 }
    );
  }
}
